#!/usr/bin/env python

import importlib

import logging

from gdc_ng_models.utils.arg_parser import get_parser
from gdc_ng_models.snacks import database


logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger('ng-models-cli')


def get_module(args):

    name = args.module

    try:
        return importlib.import_module(
            'gdc_ng_models.models.' + name
        )
    except ImportError:
        logger.error(
            'No ng-model [{name}] exists!'.format(name=name)
        )


def parse_configs(args):

    configs = database.get_configs()

    configs['host'] = args.host or configs['host']
    configs['database'] = args.database or configs['database']
    configs['admin_user'] = args.admin_user or configs['admin_user']
    configs['admin_password'] = args.admin_password or configs['admin_password']

    all_list = [
        configs['host'],
        configs['database'],
        configs['admin_user'],
        configs['admin_password'],
    ]

    return configs if all(all_list) else None


def make_database_and_tables(module, configs):

    try:

        engine = database.postgres_engine_factory(configs)
        module.Base.metadata.create_all(engine)

        logger.info(
            'Successfully created ng-models table [{name}]'
            .format(name=module.__name__)
        )
        return 0

    except Exception as e:
        logger.error(e)
        return 1


def main():
    parser = get_parser()
    args = parser.parse_args()

    module = get_module(args)
    configs = parse_configs(args)

    if module is None or configs is None:
        logger.info(
            'Halting because module or configs aren\'t correct.'
        )
        return 1

    if args.action == "create":
        return make_database_and_tables(module, configs)
    elif args.action == "grant":
        tables = list(module.Base.metadata.tables.keys()) + list(module.Base.metadata._sequences.keys())
        database.grant_privilege(configs, args.permission, args.role, tables)
    elif args.action == "revoke":
        tables = list(module.Base.metadata.tables.keys()) + list(module.Base.metadata._sequences.keys())
        database.revoke_privilege(configs, args.permission, args.role, tables)


if __name__ == '__main__':
    main()
